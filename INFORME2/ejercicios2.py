# -*- coding: utf-8 -*-
"""ejercicios2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Za7GZ1koEmYh_HZ0oDYnzshHGGCexvXX

EJERCICIO 1
"""

#Ejercicio 1:

#PUNTO A

unidadesPorProducto = {"A001": 146, "A011": 102, "A032": 86, "A125": 66, "B001": 89, "B005": 89, "P009": 96, "P019": 74, "R001": 102, "W307": 92, "Z052": 84, "Z025": 132, "Z278": 92}

#PUNTO B

ventasporProducto = {"A001": 4526000, "A011": 2550000, "A032": 3698000, "A125": 3630000, "B001": 890000, "B005": 1780000, "P009": 2880000, "P019": 3626000, "R001": 6120000, "W307": 8280000, "Z052": 2940000, "Z025": 3564000, "Z278": 5980000}

#PUNTO C

if __name__ == '__main__':

	ventasporProducto = {"A001": 4526000, "A011": 2550000, "A032": 3698000, "A125": 3630000, "B001": 890000, "B005": 1780000, "P009": 2880000, "P019": 3626000, "R001": 6120000, "W307": 8280000, "Z052": 2940000, "Z025": 3564000, "Z278": 5980000}
	ventasTotal = sum(ventasporProducto.values())


reporteVentas = [unidadesPorProducto, ventasporProducto, ventasTotal]

"""EJERCICIO 2"""

#Ejercicio 2

import pandas as pd
import numpy as np


calificaciones = {
                      "Cristian Pachon":       {"Fisica":  2.0,   "Ingles": 2.2,   "Deportes": 4.2,   "Artes": 4.0,  "Musica": 0.5},
                      "Daniela Pineda":        {"Fisica":  2.2,   "Ingles": 1.0,   "Deportes": 4.0,   "Artes": 3.1,  "Musica": 4.0},
                      "Esteban Murcia":        {"Fisica":  2.9,   "Ingles": 4.2,   "Deportes": 3.1,   "Artes": 0.0,  "Musica": 3.1},
                      "Jose Guzman":           {"Fisica":  2.0,   "Ingles": 4.0,   "Deportes": 4.0,   "Artes": 0.2,  "Musica": 0.0},
                      "Camilo Rodriguez":      {"Fisica":  2.2,   "Ingles": 0.2,   "Deportes": 0.2,   "Artes": 1.0,  "Musica": 0.2},
                      "Mariana Londoño":       {"Fisica":  2.0,   "Ingles": 5.0,   "Deportes": 1.0,   "Artes": 1.3,  "Musica": 1.0},
                      "Estefania Muños":       {"Fisica":  5.0,   "Ingles": 1.2,   "Deportes": 1.2,   "Artes": 1.9,  "Musica": 1.3},
                      "Cristian Rodriguez":    {"Fisica":  0.2,   "Ingles": 2.9,   "Deportes": 1.0,   "Artes": 4.2,  "Musica": 1.9},
                      "Natalia Alzate":        {"Fisica":  5.0,   "Ingles": 2.3,   "Deportes": 2.9,   "Artes": 2.9,  "Musica": 0.2},
                      "Juan Sanabria":         {"Fisica":  4.2,   "Ingles": 5.0,   "Deportes": 4.2,   "Artes": 4.2,  "Musica": 3.9},
                      "Juanita Calderon":      {"Fisica":  4.5,   "Ingles": 4.2,   "Deportes": 4.0,   "Artes": 0.5,  "Musica": 4.2},
                      "Laura Quintero":        {"Fisica":  4.2,   "Ingles": 4.5,   "Deportes": 4.2,   "Artes": 0.0,  "Musica": 0.5},
                      "Viviana Quesada":       {"Fisica":  0.5,   "Ingles": 0.5,   "Deportes": 2.3,   "Artes": 4.2,  "Musica": 0.0},
                      "Camila Alzate":         {"Fisica":  4.1,   "Ingles": 3.1,   "Deportes": 2.5,   "Artes": 4.3,  "Musica": 3.2},
                      "Leonidas Sanabria":     {"Fisica":  4.2,   "Ingles": 4.2,   "Deportes": 4.2,   "Artes": 2.5,  "Musica": 4.3},
                      "Juana Diaz":            {"Fisica":  4.1,   "Ingles": 0.0,   "Deportes": 4.5,   "Artes": 4.2,  "Musica": 2.5},
                      "Laura Playonero":       {"Fisica":  1.2,   "Ingles": 3.1,   "Deportes": 0.5,   "Artes": 4.5,  "Musica": 3.2},
                      "Viviana Restrepo":      {"Fisica":  0.5,   "Ingles": 0.2,   "Deportes": 4.1,   "Artes": 4.1,  "Musica": 4.5},
                      "Elias Rodriguez":       {"Fisica":  2.2,   "Ingles": 0.5,   "Deportes": 0.2,   "Artes": 0.2,  "Musica": 4.1},
                      "Mariana Pacheco":       {"Fisica":  2.0,   "Ingles": 2.2,   "Deportes": 4.0,   "Artes": 4.2,  "Musica": 0.5},
                      "Estefany Muñoz":        {"Fisica":  2.2,   "Ingles": 1.0,   "Deportes": 3.1,   "Artes": 4.0,  "Musica": 4.0},
                      "Cristian Fernandez":    {"Fisica":  2.9,   "Ingles": 4.2,   "Deportes": 0.0,   "Artes": 3.1,  "Musica": 3.1},
                      "Jessika Arias":         {"Fisica":  2.0,   "Ingles": 4.0,   "Deportes": 4.0,   "Artes": 0.0,  "Musica": 0.2},
                      "Juan Mendoza":          {"Fisica":  4.5,   "Ingles": 4.2,   "Deportes": 4.0,   "Artes": 4.2,  "Musica": 0.5},
                      "Maria Calderon":        {"Fisica":  2.2,   "Ingles": 0.2,   "Deportes": 0.2,   "Artes": 0.2,  "Musica": 1.0},
                      "Laura Lozada":          {"Fisica":  2.0,   "Ingles": 5.0,   "Deportes": 1.0,   "Artes": 1.0,  "Musica": 1.3},
                      "Yessica Quesada":       {"Fisica":  1.2,   "Ingles": 5.0,   "Deportes": 1.9,   "Artes": 1.2,  "Musica": 1.3},
                      "Jennifer Alzate":       {"Fisica":  2.9,   "Ingles": 0.2,   "Deportes": 4.2,   "Artes": 1.0,  "Musica": 1.9},
                      "Karen Sanabria":        {"Fisica":  0.0,   "Ingles": 4.1,   "Deportes": 4.2,   "Artes": 4.5,  "Musica": 2.5},
                      "Fernando Rodriguez":    {"Fisica":  0.5,   "Ingles": 2.2,   "Deportes": 0.2,   "Artes": 0.2,  "Musica": 4.1},
                      "Nina Londoño":          {"Fisica":  4.2,   "Ingles": 4.2,   "Deportes": 2.5,   "Artes": 4.2,  "Musica": 4.3},
                      "Favio Munera":          {"Fisica":  5.0,   "Ingles": 2.3,   "Deportes": 2.9,   "Artes": 2.9,  "Musica": 0.2},
                      "Lindsey Roy":           {"Fisica":  4.2,   "Ingles": 5.0,   "Deportes": 4.2,   "Artes": 4.2,  "Musica": 3.9},
                      "Nathalia Hernandez":    {"Fisica":  4.2,   "Ingles": 4.5,   "Deportes": 0.0,   "Artes": 4.2,  "Musica": 0.5},
                      "Juan Gaviria":          {"Fisica":  0.5,   "Ingles": 0.5,   "Deportes": 4.2,   "Artes": 2.3,  "Musica": 0.0},
                      "Fabio Urrego":          {"Fisica":  4.1,   "Ingles": 3.1,   "Deportes": 4.3,   "Artes": 2.5,  "Musica": 3.2},
                      "Fernanda Quintero":     {"Fisica":  0.5,   "Ingles": 0.2,   "Deportes": 4.1,   "Artes": 4.1,  "Musica": 4.5},
                      "Camila Queiroz":        {"Fisica":  1.2,   "Ingles": 3.1,   "Deportes": 4.5,   "Artes": 0.5,  "Musica": 3.2},
                      "Ursula Alzate":         {"Fisica":  2.2,   "Ingles": 4.0,   "Deportes": 4.2,   "Artes": 0.5,  "Musica": 2.0},
                      "Aureliano Buendia":     {"Fisica":  1.0,   "Ingles": 3.1,   "Deportes": 4.0,   "Artes": 4.0,  "Musica": 2.2},
                }

df = pd.DataFrame(data=calificaciones) #Dataframe a partir del diccionario, prodremos ver de manera ordenada los datos del mismo. 
df.round(2) # Mostramos el dataframe generado

df2 = df.mean(axis=0)
df3 = df2.to_dict()
df3
K = 2

promediosPorEstudiante = dict() 
for key in df3: 
      
    
    promediosPorEstudiante[key] = round(df3[key], K) 
promediosPorEstudiante

df4 = df.mean(axis=1) 
df5 = df2.to_dict() 

K = 2

promediosPorMateria = dict() 
for key in df5: 
      
    
     promediosPorMateria[key] = round(df5[key], K) 
promediosPorMateria

## Estudiantes que aprueban:
est = df2
est = est[df2 > 3 ]
est.to_dict()
estudiantesAprobados = list(est.keys())
estudiantesAprobados

## Estudiantes que repueban: 
est2 = df2
est = est[df2 < 3]
est.to_dict()
estudiantesReprobados = list(est2.keys())
estudiantesReprobados

reporteEstudiantes = [promediosPorEstudiante, promediosPorMateria, estudiantesAprobados, estudiantesReprobados]

"""EJERCICIO 4"""

#Ejercicio 4
# #obtenerMultiplos: Función para generar los primeros 10 multiplos de un numero.

def obtenerMultiplos(n):

  return [n * i for i in range(1, 10 + 1)]


lista1 = (obtenerMultiplos(100))
lista.pop(0)
a = len(lista)
lista.pop(a-1)
lista1

#obtenerDivisores: función para generar una lista de todos los divisores positivos de un número.

def obtenerDivisores(numero):
    """
    Genera una lista de los divisores de un número.
    """
    resultado = [i for i in range(1, numero + 1) if numero % i == 0]

    return resultado
#resultado = list()
lista = (obtenerDivisores(100))
lista.pop(0)
a = len(lista)
lista.pop(a-1)
lista

def obtenerNesimoFibonacci(n):
  return [n * i for i in range(1, 10 + 1)]
lista3 = (obtenerNesimoFibonacci(100))
lista3.pop(0)
a = len(lista)
lista.pop(a-1)
lista3

funciones = [ obtenerMultiplos,obtenerDivisores, obtenerNesimoFibonacci]

"""EJERCICIO 5"""

#Ejercicio 5




def calcularSalario(Nombre, cantidadArticulos):
  
    cantidadArticulos = (1380000 + cantidadArticulos[0] * 5000 + cantidadArticulos[1] * 2800 + cantidadArticulos[2] * 2400 + cantidadArticulos[3] * 1750 + cantidadArticulos[4] * 1750 + cantidadArticulos[5] * 2400 + cantidadArticulos[6] * 1900)
    return {"nombre": Nombre, "salario": cantidadArticulos}

calcularSalario